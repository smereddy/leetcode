# Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.
#
# Example :
#
# Input: root = [4,2,6,1,3,null,null]
# Output: 1
# Explanation:
# Note that root is a TreeNode object, not an array.
#
# The given tree [4,2,6,1,3,null,null] is represented by the following diagram:
#
# 4
# / \
#     2      6
# / \
#     1   3
#
# while the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.
# Note:
#
# The size of the BST will be between 2 and 100.
# The BST is always valid, each node's value is an integer, and each node's value is different.
# This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
import math
class Solution:
    def minDiffInBST(self, root) -> int:
        queue = []
        def inorder(node):
            if node:
                inorder(node.left)
                queue.append(node.val)
                inorder(node.right)

        inorder(root)
        mindiff = math.inf
        print(queue)
        print(queue[1:])
        return min(b-a for a, b in zip(queue, queue[1:]))

#         for n in queue:
#             for i in range(len(queue)):
#                 if n != queue[i]:
#                     current = abs(n - queue[i])
#                     if current < mindiff:
#                         mindiff = current


#         return mindiff













